CREATE OR REPLACE PROCEDURE ALLINEAPERIODIRAPPORTO (M IN VARCHAR2) AS
  CURSOR C1(P_PROG INTEGER) IS
    SELECT PROGRESSIVO,INIZIO,FINE,DATADECORRENZA,DATAFINE,ROWID FROM T430_STORICO WHERE
      PROGRESSIVO = P_PROG
      ORDER BY DATADECORRENZA;
  CURSOR C2(P_PROG INTEGER) IS
    SELECT DISTINCT PROGRESSIVO,INIZIO,FINE FROM T430_STORICO WHERE
      PROGRESSIVO = P_PROG AND
      INIZIO IS NOT NULL
      ORDER BY INIZIO;
  --Gestione V430 materializzata
  CURSOR C3(P_PROG INTEGER) IS
    SELECT PROGRESSIVO,DATADECORRENZA,INIZIO,FINE FROM T430_STORICO WHERE PROGRESSIVO = P_PROG ORDER BY DATADECORRENZA;
  D DATE;
  R VARCHAR2(1);
  P_PROG INTEGER;
  I INTEGER;
  ESPRESSIONE                 VARCHAR2(32767) :='';
  CURSORE_DINAMICO_V430       INTEGER;
  CURS_V430                   INTEGER;
BEGIN
  select PROGRESSIVO into P_PROG from T030_ANAGRAFICO where MATRICOLA = M;
  
  --Valorizza INIZIO se mancante e FINE se incoerente con INIZIO
  FOR T2 IN C2(P_PROG) LOOP
    UPDATE T430_STORICO SET INIZIO = T2.INIZIO, FINE = T2.FINE
      WHERE PROGRESSIVO = T2.PROGRESSIVO AND
            ((INIZIO IS NULL AND DATADECORRENZA BETWEEN T2.INIZIO AND NVL(T2.FINE,TO_DATE('31123999','DDMMYYYY')))
             OR
             (NVL(FINE,TO_DATE('31123999','DDMMYYYY')) < T2.INIZIO AND DATADECORRENZA > T2.INIZIO)
             --(NVL(FINE,TO_DATE('31123999','DDMMYYYY')) < T1.INIZIO AND DATADECORRENZA > NVL(T1.FINE,TO_DATE('31123999','DDMMYYYY')))
            ) ;
  END LOOP;
  
  --Valorizza INIZIO se incoerente con i periodi storici
  FOR T1 IN C1(P_PROG) LOOP
    IF T1.INIZIO IS NULL THEN
      D:=NULL;
      SELECT MAX(INIZIO) INTO D FROM T430_STORICO WHERE
        PROGRESSIVO = T1.PROGRESSIVO AND DATADECORRENZA < T1.DATADECORRENZA AND INIZIO IS NOT NULL;
      IF D IS NULL THEN
        SELECT MIN(INIZIO) INTO D FROM T430_STORICO WHERE
        PROGRESSIVO = T1.PROGRESSIVO AND DATADECORRENZA > T1.DATADECORRENZA AND INIZIO IS NOT NULL;
      END IF;
      IF D IS NOT NULL THEN
        UPDATE T430_STORICO SET INIZIO = D WHERE ROWID = T1.ROWID;
      END IF;
    END IF;
  END LOOP;
  
  --Valorizza FINE se incoerente con INIZIO
  UPDATE T430_STORICO SET FINE = NULL WHERE
    PROGRESSIVO = P_PROG AND
    FINE < INIZIO;
  FOR T1 IN C1(P_PROG) LOOP
    IF T1.INIZIO IS NOT NULL THEN
      SELECT MAX(FINE) INTO D FROM T430_STORICO WHERE PROGRESSIVO = T1.PROGRESSIVO
        AND INIZIO = T1.INIZIO AND FINE IS NOT NULL;
      IF D IS NOT NULL THEN
        UPDATE T430_STORICO SET FINE = D WHERE ROWID = T1.ROWID;
      END IF;
    END IF;
  END LOOP;

  --Valorizza RAPPORTI_UNIFICATI uniformemente nei vari periodi di INIZIO-FINE
	/*Annullata per incompatibilitÃ  con i flussi di integrazione anagrafica (per es. ADS)
  FOR T2 IN C2(P_PROG) LOOP
    SELECT MAX(RAPPORTI_UNIFICATI) INTO R FROM T430_STORICO WHERE PROGRESSIVO = T2.PROGRESSIVO
      AND INIZIO = T2.INIZIO AND RAPPORTI_UNIFICATI IS NOT NULL;
    IF R IS NOT NULL THEN
      UPDATE T430_STORICO SET RAPPORTI_UNIFICATI = R WHERE INIZIO = T2.INIZIO;
    END IF;
  END LOOP;
  */
	
  --Gestione V430 materializzata
  begin
    select count(*) into I from tabs where TABLE_NAME = 'V430_STORICO';
    if I = 1 then
      for t3 in c3(p_prog) loop
      CURSORE_DINAMICO_V430:=DBMS_SQL.OPEN_CURSOR;
      ESPRESSIONE:='update V430_STORICO set T430INIZIO = :INIZIO, T430FINE = :FINE where T430PROGRESSIVO = :PROGRESSIVO and T430DATADECORRENZA = :DATADECORRENZA';
      DBMS_SQL.PARSE(CURSORE_DINAMICO_V430,ESPRESSIONE,DBMS_SQL.NATIVE);
	  DBMS_SQL.BIND_VARIABLE(CURSORE_DINAMICO_V430,'INIZIO',T3.INIZIO);
	  DBMS_SQL.BIND_VARIABLE(CURSORE_DINAMICO_V430,'FINE',T3.FINE);
	  DBMS_SQL.BIND_VARIABLE(CURSORE_DINAMICO_V430,'PROGRESSIVO',T3.PROGRESSIVO);
	  DBMS_SQL.BIND_VARIABLE(CURSORE_DINAMICO_V430,'DATADECORRENZA',T3.DATADECORRENZA);
      CURS_V430:=DBMS_SQL.EXECUTE(CURSORE_DINAMICO_V430);
      DBMS_SQL.CLOSE_CURSOR(CURSORE_DINAMICO_V430);
      end loop;
    end if;
  exception
    when others then null;
  end;
  commit;
EXCEPTION
  WHEN NO_DATA_FOUND THEN
    NULL;
END;
/