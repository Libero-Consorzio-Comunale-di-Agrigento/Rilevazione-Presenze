CREATE OR REPLACE FUNCTION 
I035F_GETVAL_PILOTATO (DATA_RIF     IN  DATE,        -- contiene la data di riferimento
                       VAL_PILOTA   IN  VARCHAR2,    -- contiene il valore della colonna pilota
                       TAB_PILOTATA IN  VARCHAR2,    -- contiene il nome della tabella della colonna pilotata
                       COL_PILOTATA IN  VARCHAR2)    -- contiene il nome della colonna pilotata
                       RETURN VARCHAR2 is            -- restituisce il valore della colonna pilotata
-- Questa function restituisce il valore della colonna pilotata di una relazione, passando il valore pilota e la data di riferimento
-- Se inizia con "#ERR=" allora non è andata a buon fine e bisogna segnalare il testo dell'errore restituito
-- Questa function è un estratto delle procedure ALLINEA_PERIODI_STORICI e PRE_ALLINEA_PERIODI_STORICI
  -- DICHIARAZIONE CURSORI
  CURSOR CI035 (p_tabella     I035_RELAZIONI_DETTAGLIO.tabella%TYPE,
                p_colonna     I035_RELAZIONI_DETTAGLIO.colonna%TYPE,
                p_decorrenza  I035_RELAZIONI_DETTAGLIO.decorrenza%TYPE) IS
    SELECT I035.relazione, I035.num
    FROM   I035_RELAZIONI_DETTAGLIO I035
    WHERE  I035.tabella = p_tabella
    AND    I035.colonna = p_colonna
    AND    I035.decorrenza = p_decorrenza
    ORDER BY I035.num;
  CURSORE_DINAMICO_SEL_REL    INTEGER;
  CURS_SEL_REL                INTEGER;
  --
  -- DICHIARAZIONE ARRAY
  TYPE CAMPI_NOT_NULL_TYPE IS RECORD
    (x430_colonna   VARCHAR2(100),
     data_default   VARCHAR2(100));
  TYPE ARRAY_CAMPI_NOT_NULL IS TABLE OF CAMPI_NOT_NULL_TYPE INDEX BY BINARY_INTEGER;
  CAMPI_NOT_NULL_ARR ARRAY_CAMPI_NOT_NULL;
  --
  -- DICHIARAZIONE VARIABILI
  I                           INTEGER         :=0 ;
  I030_DECORRENZA             DATE                ;
  SRELAZIONE                  VARCHAR2(32767) :='';
  sAPPOGGIO                   VARCHAR2(32767) :='';
  OLDCAMPO                    VARCHAR2(1000)  :='';
  NEWCAMPO                    VARCHAR2(1000)  :='';
  VALORE                      VARCHAR2(100)   :='';
  PART                        INTEGER         :=0 ;
  ARR                         INTEGER         :=0 ;
  CONTINUA_ESTR_RELAZIONE     BOOLEAN             ;
  NULLABLE                    VARCHAR2(1)     :='';
  DATA_DEFAULT                VARCHAR2(100)   :='';
  VAL_PILOTATA                VARCHAR2(100)   :='';
  ERRORE                      VARCHAR2(4000)  :='';
  result                      VARCHAR2(4000)  :='';

  PROCEDURE RECUPERA_RELAZIONE IS
  BEGIN
    CONTINUA_ESTR_RELAZIONE:=FALSE;
    SRELAZIONE:='';
    -- RICAVO L'SQL DELLA RELAZIONE
    FOR RI035 IN CI035 (TAB_PILOTATA,
                        COL_PILOTATA,
                        I030_DECORRENZA) LOOP
      CONTINUA_ESTR_RELAZIONE:=FALSE;
      IF RI035.NUM > PART AND RI035.NUM <= ARR THEN
        SRELAZIONE:=SRELAZIONE||' '||RI035.RELAZIONE;
      ELSIF RI035.NUM > PART AND RI035.NUM > ARR THEN
        PART:=PART + 20;
        ARR:=ARR + 20;
        CONTINUA_ESTR_RELAZIONE:=TRUE;
        EXIT;
      END IF;
    END LOOP; -- FINE CI035 --
    SRELAZIONE:=RTRIM(LTRIM(SRELAZIONE));
    IF SRELAZIONE IS NOT NULL THEN
      WHILE INSTR(SRELAZIONE,'<#>') > 0 LOOP
        sAPPOGGIO:=SUBSTR(SRELAZIONE,INSTR(SRELAZIONE,'<#>')+3);
        OLDCAMPO:=SUBSTR(sAPPOGGIO,1,INSTR(sAPPOGGIO,'<#>')-1);
        IF OLDCAMPO = 'DECORRENZA' THEN
          NEWCAMPO:='T1.'||'DATADECORRENZA';
        ELSIF OLDCAMPO = 'DECORRENZA_FINE' THEN
          NEWCAMPO:='T1.'||'DATAFINE';
        ELSIF OLDCAMPO = ';' THEN
          NEWCAMPO:=' UNION SELECT ';
        ELSIF OLDCAMPO = 'W' THEN
          NEWCAMPO:=' FROM DUAL T1 WHERE ';
        ELSIF OLDCAMPO = 'D' THEN
          NEWCAMPO:=' FROM DUAL T1 ';
        ELSE
          NEWCAMPO:=''''||VAL_PILOTA||'''';
        END IF;
        SRELAZIONE:=REPLACE(SRELAZIONE,'<#>'||OLDCAMPO||'<#>',NEWCAMPO);
      END LOOP; -- FINE RICERCA <#> --
      IF NVL(SUBSTR(SRELAZIONE,LENGTH(SRELAZIONE)-13,14),'#NULL#') = ' UNION SELECT ' THEN
        SRELAZIONE:=SUBSTR(SRELAZIONE,1,LENGTH(SRELAZIONE)-14);
      END IF;
      IF LENGTH(SRELAZIONE) > 0 THEN
        IF SUBSTR(SRELAZIONE,1,6) <> 'SELECT' THEN
          SRELAZIONE:='SELECT '||SRELAZIONE;
        END IF;
        IF INSTR(SRELAZIONE,' FROM ') = 0 THEN
          SRELAZIONE:=SRELAZIONE||' FROM DUAL T1 ';
        END IF;
      END IF;
      SRELAZIONE:=RTRIM(LTRIM(SRELAZIONE));
    END IF;
  END;
-- INIZIO ELABORAZIONE
BEGIN
  result:=null;
  VAL_PILOTATA:='';
  ERRORE:='';
  -- RECUPERO LA DECORRENZA DELLA RELAZIONE
  BEGIN
    SELECT I030.decorrenza
    INTO   I030_DECORRENZA
    FROM   I030_RELAZIONI_ANAGRAFE I030
    WHERE  I030.tabella = TAB_PILOTATA
    AND    I030.colonna = COL_PILOTATA
    AND    DATA_RIF BETWEEN I030.decorrenza AND I030.decorrenza_fine;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      I030_DECORRENZA:=NULL;
      ERRORE:='RELAZIONE NON TROVATA';
      GOTO FINE_ESECUZIONE;
  END;
  -- SALVO IL VALORE DI DEFAULT DELLA COLONNA PILOTATA SE NON PUò ESSERE NULL
  BEGIN
    SELECT NULLABLE, DATA_DEFAULT
    INTO   NULLABLE, DATA_DEFAULT
    FROM   COLS
    WHERE  TABLE_NAME = TAB_PILOTATA
    AND    COLUMN_NAME = COL_PILOTATA;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      NULLABLE:='Y';
      DATA_DEFAULT:='';
  END;
  IF NULLABLE = 'N' THEN
    CAMPI_NOT_NULL_ARR(I).X430_COLONNA:=COL_PILOTATA;
    CAMPI_NOT_NULL_ARR(I).DATA_DEFAULT:=DATA_DEFAULT;
  END IF;
  --
  PART:=0;
  ARR:=20;
  RECUPERA_RELAZIONE; -- IMPOSTA SRELAZIONE
  -- ESTRAGGO IL VALORE CON L'SQL CHE HO RICAVATO
  IF SRELAZIONE IS NOT NULL THEN
    -- PREPARO IL CURSORE DINAMICO PER NON ESEGUIRE TUTTE LE VOLTE OPEN E PARSE
    CURSORE_DINAMICO_SEL_REL:=DBMS_SQL.OPEN_CURSOR;
    BEGIN--CURSORE_DINAMICO_SEL_REL
      DBMS_SQL.PARSE(CURSORE_DINAMICO_SEL_REL,SRELAZIONE,DBMS_SQL.NATIVE);
      DBMS_SQL.DEFINE_COLUMN(CURSORE_DINAMICO_SEL_REL,1,VALORE,100);
      -- CICLO SUGLI SPEZZONI DELLA RELAZIONE FINCHÉ TROVO IL VALORE DA AGGIORNARE OPPURE FINISCO LE RIGHE
      LOOP -- INIZIO CONTINUA_ESTR_RELAZIONE --
        CURS_SEL_REL:=DBMS_SQL.EXECUTE(CURSORE_DINAMICO_SEL_REL);
        IF DBMS_SQL.FETCH_ROWS(CURSORE_DINAMICO_SEL_REL)>0 THEN
          DBMS_SQL.COLUMN_VALUE(CURSORE_DINAMICO_SEL_REL, 1, VALORE);
          IF CONTINUA_ESTR_RELAZIONE = FALSE OR VALORE IS NOT NULL THEN
            IF VALORE IS NULL THEN
              -- IMPOSTO LA VARIABILE A NULL PER L'AGGIORNAMENTO
              VALORE:='#N#U#L#L#';
              -- VERIFICO SE QUESTO CAMPO DEVE ESSERE VALORIZZATO E QUAL E' IL VALORE DI DEFAULT
              FOR I IN 1..CAMPI_NOT_NULL_ARR.COUNT LOOP
                IF CAMPI_NOT_NULL_ARR(I).X430_COLONNA = COL_PILOTATA THEN
                -- SE IL CAMPO DEVE ESSERE VALORIZZATO ASSEGNO IL VALORE DI DEFAULT
                  VALORE:=CAMPI_NOT_NULL_ARR(I).DATA_DEFAULT;
                  EXIT;
                END IF;
              END LOOP;
            END IF;
          ELSE
            -- RECUPERO IL TESTO DELLA RELAZIONE DALLE RIGHE SUCCESSIVE DI I035 E LO ASSEGNO AL CURSORE DINAMICO
            RECUPERA_RELAZIONE; -- IMPOSTA SRELAZIONE
            IF SRELAZIONE IS NOT NULL THEN
              DBMS_SQL.PARSE(CURSORE_DINAMICO_SEL_REL,SRELAZIONE,DBMS_SQL.NATIVE);
              DBMS_SQL.DEFINE_COLUMN(CURSORE_DINAMICO_SEL_REL,1,VALORE,100);
            END IF;
          END IF;
        ELSE
          -- SE ADDIRITTURA NON TROVO LA RIGA DI DUAL, IMPOSTO LA VARIABILE A NULL PER L'AGGIORNAMENTO
          VALORE:='ERR';--NON DOVREBBE CAPITARE
          ERRORE:='RELAZIONE SENZA RISULTATO: '||SUBSTR(SRELAZIONE,1,3900);
        END IF;
        EXIT WHEN VALORE IS NOT NULL;
      END LOOP; -- FINE CONTINUA_ESTR_RELAZIONE --
      VAL_PILOTATA:=VALORE;
      IF VAL_PILOTATA = '#N#U#L#L#' THEN
        VAL_PILOTATA:=NULL;
      END IF;
    EXCEPTION
      WHEN OTHERS THEN
        ERRORE:='RELAZIONE NON ESEGUIBILE: '||SUBSTR(SRELAZIONE,1,3900);
    END;--CURSORE_DINAMICO_SEL_REL
    DBMS_SQL.CLOSE_CURSOR(CURSORE_DINAMICO_SEL_REL);
  ELSE
    ERRORE:='RELAZIONE SENZA TESTO';
  END IF;
  --
<<FINE_ESECUZIONE>>
  result:=VAL_PILOTATA;
  IF ERRORE IS NOT NULL THEN
    result:='#ERR='||ERRORE;
  END IF;
  return(result);
EXCEPTION
  WHEN OTHERS THEN NULL;
END;
/
